QUESTION:

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 
Constraints:
3 <= nums.length <= 3000
-105 <= nums[i] <= 105

BETTER APPROACH- USES EXTRA SPACE- ALSO LEEDS TO TLE

// Approach: Hashing + Set to Handle Duplicates
// Time Complexity: O(n^2 * log k), where k is the number of unique triplets (because of set insertion and sorting)
// Space Complexity: O(n + k), for hash map and set to store triplets

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& arr) {
        int n = arr.size();
        vector<vector<int>> ans;
        set<vector<int>> st; // To avoid duplicate triplets

        // Fix one element at a time and use hashing to find the other two
        for (int i = 0; i < n; i++) {
            unordered_map<int, int> mp; // Stores elements seen so far in the inner loop

            for (int j = i + 1; j < n; j++) {
                int third = -(arr[i] + arr[j]); // The value we need to find to complete the triplet

                // If the required third element was already seen
                if (mp.find(third) != mp.end()) {
                    vector<int> temp = {arr[i], arr[j], third};
                    sort(temp.begin(), temp.end()); // Sort to ensure duplicates are caught by set
                    st.insert(temp); // Insert into set (auto removes duplicates)
                } else {
                    mp[arr[j]]++; // Mark this value as seen
                }
            }
        }

        // Transfer unique triplets from set to result vector
        for (auto it : st)
            ans.push_back(it);

        return ans;
    }
};

OPTIMAL APPROACH:

// Approach: Sorting + Two Pointers
// Time Complexity: O(n^2)
// Space Complexity: O(1) extra space (excluding the output vector)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());  // Sort the array to apply two-pointer strategy
        int n = nums.size();

        // Iterate through each number as the first element of the triplet
        for (int i = 0; i < n; i++) {

            // Skip duplicate elements for the first number
            if (i > 0 && nums[i] == nums[i - 1])
                continue;

            int j = i + 1;     // Second pointer
            int k = n - 1;     // Third pointer

            // Use two-pointer approach to find two numbers that sum with nums[i] to zero
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];

                if (sum == 0) {
                    // Found a valid triplet
                    ans.push_back({nums[i], nums[j], nums[k]});

                    // Skip duplicate elements for the second number
                    while (j < k && nums[j] == nums[j + 1]) j++;

                    // Skip duplicate elements for the third number
                    while (j < k && nums[k] == nums[k - 1]) k--;

                    // Move pointers inward
                    j++;
                    k--;
                }
                else if (sum < 0) {
                    j++;  // Increase sum by moving j to the right
                }
                else {
                    k--;  // Decrease sum by moving k to the left
                }
            }
        }
        return ans;
    }
};
