QUESTION:

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
 
Constraints:
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.

CODE:

// Approach: Hashing (unordered_map) for O(1) lookups.
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        // Create an unordered_map to store {value, index} pairs
        unordered_map<int, int> mp;
        // Traverse the array once
        for (int i = 0; i < nums.size(); i++) {
            int current = nums[i];
            // Calculate the complement that would sum with current to reach the target
            int complement = target - current;

            // Check if complement already exists in map
            if (mp.find(complement) != mp.end()) {
                // If found, return the indices of complement and current
                return {mp[complement], i};
            }
            // Otherwise, store the current value and its index in map
            mp[current] = i;
        }

        // If no pair is found (though problem guarantees one), return empty vector
        return {};
    }
};
