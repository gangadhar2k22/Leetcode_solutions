QUESTION:

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 
Constraints:
1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105

CODE: 
Solution-1: O(K) space 

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        //edge case
        if(n==1 || k==0)
            return;
        k = k%n;
        vector<int>temp(k);
        //store the last K elements
        for(int i=0;i<k;i++){
            temp[i]=nums[n+i-k];
        }
        //move the elements to right
        for(int i=n-k-1;i>=0;i--){
            nums[(i+k)%n] = nums[i];
        }
        //copy temp array elements to original arr
        for(int i=0;i<k;i++)
            nums[i] = temp[i];
    }
};

Solution-2: O(1) space

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        k = k%n;
        if(k==0)
            return;
        reverse(nums.begin(),nums.end());
        reverse(nums.begin(),nums.begin()+k);
        reverse(nums.begin()+k,nums.end());
    }
};
