QUESTION:

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.

Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
Input: nums = [0]
Output: [0]
 
Constraints:
1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

CODE:

// Approach: Count the number of zeros encountered while iterating,
// and shift non-zero elements to the left using minimal swaps.

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n = nums.size();
        int count = 0;  // Counts the number of zeros encountered

        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                count++;  // Found a zero, just increase count
            } else {
                // Swap the current non-zero element with the position it should be moved to
                swap(nums[i - count], nums[i]);
            }
        }
    }
};
