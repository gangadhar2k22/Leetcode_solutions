QUESTION:

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, 
with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]
 
Constraints:
n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.

CODE:
// Approach: Dutch National Flag Algorithm
// We use three pointers: 
//   - i: to place 0s
//   - j: to place 2s
//   - temp: to scan through the array

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int i = 0;       // Pointer to place 0s
        int j = n - 1;   // Pointer to place 2s
        int temp = 0;    // Current element being scanned

        // Process elements until temp crosses j
        while (temp <= j) {
            if (nums[temp] == 0) {
                // Swap current 0 with the element at i and move both pointers forward
                swap(nums[i], nums[temp]);
                i++;
                temp++;
            }
            else if (nums[temp] == 1) {
                // 1 is in correct place, just move temp
                temp++;
            }
            else {
                // Swap current 2 with the element at j and move j backward
                swap(nums[temp], nums[j]);
                j--;
                // Do not increment temp here because the swapped element needs to be checked
            }
        }
    }
};
