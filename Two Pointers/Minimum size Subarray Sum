QUESTION:

Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum 
is greater than or equal to target. If there is no such subarray, return 0 instead.

Example 1:
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

Example 2:
Input: target = 4, nums = [1,4,4]
Output: 1

Example 3:
Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 
Constraints:
1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 104

CODE:
// Approach: TWO POINTER + Sliding Window Technique
// Time Complexity: O(n)
// Space Complexity: O(1)

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int n = nums.size();
        int left = 0, right = 0; // Two pointers defining the sliding window
        int sum = 0;             // Current window sum
        int mini = INT_MAX;      // To store the minimum window size found

        // Traverse the array using the right pointer
        while (right < n) {
            sum += nums[right]; // Expand the window by including nums[right]

            // Shrink the window from the left while the sum meets or exceeds target
            while (sum >= target) {
                mini = min(mini, right - left + 1); // Update minimum window size
                sum -= nums[left]; // Exclude nums[left] from the window
                left++;            // Move left pointer to right
            }
            right++; // Move right pointer to explore further
        }

        // If no valid window was found, return 0
        return (mini == INT_MAX) ? 0 : mini;
    }
};
