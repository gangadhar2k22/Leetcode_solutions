QUESTION:

Given a string s, find the length of the longest substring without duplicate characters.

Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 
Constraints:
0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

CODE:

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        //Brute force
        /*
        int n = s.length();
        int maxi=0;
        for(int i=0;i<n;i++){
            int freq[256]={0};
            for(int j=i;j<n;j++){
                if(freq[s[j]])
                    break;
                maxi = max(maxi,j-i+1);
                freq[s[j]]=1;
            }
        }
        return maxi;
        */
        //Optimal approach
        int n = s.length();
        int maxi=0;
        int i=0,j=0;
        int freq[256]={0};
        while(j<n){
            if(freq[s[j]]){
                freq[s[i]]--;
                i++;
            }
            else{
                freq[s[j]]++;
                maxi = max(maxi,j-i+1);
                j++;
            }
        }
        return maxi;
    }
};
