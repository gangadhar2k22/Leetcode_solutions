QUESTION:

Given a string s consisting only of characters a, b and c.
Return the number of substrings containing at least one occurrence of all these characters a, b and c.

Example 1:
Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). 

Example 2:
Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb". 

Example 3:
Input: s = "abc"
Output: 1
 
Constraints:
3 <= s.length <= 5 x 10^4
s only consists of a, b or c characters.

CODE:

int numberOfSubstrings(string s) {
        //brute force
        /*
        int n = s.length();
        int count=0;
        for(int i=0;i<n;i++){
            unordered_map<char,int>mp;
            for(int j=i;j<n;j++){
                mp[s[j]]++;
                if(mp.size()>=3)
                    count++;
            }
        }
        return count;
        */
}

// SLIDING WINDOW APPROACH

class Solution {
public:
    int numberOfSubstrings(string s) {
        int n = s.length();
        int count=0;
        int i=0,j=0;
        unordered_map<char,int>mp;
        while(j<n){
            mp[s[j]]++;
            while(mp.size()==3){
                count+=(n-j);
                mp[s[i]]--;
                if(mp[s[i]]==0)
                    mp.erase(s[i]);
                i++;
            }
            j++;
        }
        return count;
    }
};

// SMALL IMPROVEMENT FOR ABOVE APPROACH

int numberOfSubstrings(string s) {
      int n = s.length();
        int count = 0;
        int i = 0;
        vector<int> freq(3, 0); // index 0 for 'a', 1 for 'b', 2 for 'c'

        for (int j = 0; j < n; ++j) {
            freq[s[j] - 'a']++;
            while (freq[0] && freq[1] && freq[2]) {
                count += (n - j);
                freq[s[i] - 'a']--;
                i++;
            }
        }
        return count;
    }
