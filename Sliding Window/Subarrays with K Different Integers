QUESTION:

Given an integer array nums and an integer k, return the number of good subarrays of nums.
A good array is an array where the number of different integers in that array is exactly k.
For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

Example 1:
Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]

Example 2:
Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 
Constraints:
1 <= nums.length <= 2 * 104
1 <= nums[i], k <= nums.length

BRUTE FORCE CODE:

class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        int n = nums.size();
        int count = 0;

        // Iterate over all possible subarrays using two nested loops
        for(int i = 0; i < n; i++) {
            unordered_map<int, int> mp;

            for(int j = i; j < n; j++) {
                mp[nums[j]]++; // Add the current element to the frequency map

                // If the number of distinct elements in the map is exactly k,
                // increment the count (this is a valid subarray)
                if(mp.size() == k)
                    count++;
            }
        }

        return count;
    }
};

OPTIMIZED CODE:

class Solution {
public:
    // Helper function to count the number of subarrays with at most k distinct integers
    int helper(vector<int>& nums, int k) {
        int n = nums.size();
        int i = 0, j = 0, count = 0;
        unordered_map<int, int> mp;

        // Expand the window with j, and shrink it from i when necessary
        while(j < n) {
            mp[nums[j]]++;  // Include nums[j] in the window

            // If the number of distinct elements exceeds k, shrink the window from left
            while(mp.size() > k) {
                mp[nums[i]]--;   // Decrease the frequency of nums[i]
                if(mp[nums[i]] == 0)
                    mp.erase(nums[i]); // Remove element from map if count becomes 0
                i++;
            }

            // Number of subarrays ending at j with at most k distinct elements
            count += (j - i + 1);
            j++;
        }

        return count;
    }

    int subarraysWithKDistinct(vector<int>& nums, int k) {
        // The number of subarrays with exactly k distinct integers
        // is equal to the number with at most k minus the number with at most (k - 1)
        return helper(nums, k) - helper(nums, k - 1);
    }
};
