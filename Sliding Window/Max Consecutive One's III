QUESTION:

Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:
Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

Example 2:
Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 
Constraints:
1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length

CODE:

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        //brute-force: Generate all subarrays
        /*
        int n = nums.size();
        int max_count=0;
        for(int i=0;i<n;i++){
            int countZeros=0;
            for(int j=i;j<n;j++){
                if(nums[j]==0)
                    countZeros++;
                if(countZeros<=k){
                    max_count = max(max_count,j-i+1);
                }
                else{
                    break;
                }
            }
        }
        return max_count;
        */
        //Optimal approach-Using Sliding window
        int n = nums.size();
        int max_count=0;
        int countZeros=0;
        int left=0,right=0;
        while(right<n){
            if(nums[right]==0)
                countZeros++;
            //shrink the window
            if(countZeros>k){
                //before you shrink check whether it's zero
                if(nums[left]==0)
                    countZeros--;
                left++;
            }
            //expand the window and update the max_count
            if(countZeros<=k){
                max_count = max(max_count,right-left+1);
            }
            right++;
        }
        return max_count;
    }
};
